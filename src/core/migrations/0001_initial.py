# Generated by Django 4.2.2 on 2023-06-24 14:02

import core.libs.validators.nip_validator
from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import django_quill.fields
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "username",
                    models.EmailField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        max_length=254,
                        unique=True,
                        verbose_name="username",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Lecturer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fullname",
                    models.CharField(max_length=100, verbose_name="Imie i Nazwisko"),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="Unikalny skrót pojawiający się w adresie URL (Ważne dla SEO)",
                        max_length=120,
                        verbose_name="Skrót URL",
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        help_text="Obrazek powinien być dobrej jakościo wymiarach kwadratowych (np. 500px na 500px)",
                        upload_to="uploads/lecturers",
                        verbose_name="Avatar",
                    ),
                ),
                (
                    "biography",
                    django_quill.fields.QuillField(
                        blank=True, verbose_name="Biografia"
                    ),
                ),
            ],
            options={
                "verbose_name": "Wykładowca",
                "verbose_name_plural": "Wykładowcy",
            },
        ),
        migrations.CreateModel(
            name="Webinar",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("INIT", "Termin wystawiony"),
                            ("CONFIRMED", "Termin potwierdzony"),
                            ("CANCELED", "Termin odwołany"),
                            ("DONE", "Termin zrealizowany"),
                        ],
                        default="INIT",
                        max_length=32,
                    ),
                ),
                (
                    "title_original",
                    models.TextField(
                        help_text="Tytuł szkolenia jaki został dostarczony przez wykładowce",
                        verbose_name="Pełny tytuł szkolenia",
                    ),
                ),
                (
                    "title",
                    models.TextField(
                        help_text="Tytuł szkolenia zmodyfikowany, aby mieścił się w ogrniczonej ilości znaków",
                        max_length=220,
                        verbose_name="Tytuł szkolenia",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="Unikalny skrót pojawiający się w adresie URL (Ważne dla SEO)",
                        max_length=230,
                        unique=True,
                        verbose_name="Skrót URL",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Dodatkowy opis webinaru",
                        max_length=200,
                        verbose_name="Dodatkowy opis",
                    ),
                ),
                ("date", models.DateTimeField(verbose_name="Data i Godzina")),
                (
                    "price_netto",
                    models.PositiveSmallIntegerField(verbose_name="Cena NETTO"),
                ),
                (
                    "discount_netto",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="Cena NETTO (Promocyjna)"
                    ),
                ),
                (
                    "discount_until",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Promocja do"
                    ),
                ),
                (
                    "program",
                    django_quill.fields.QuillField(
                        default="[Program Szkolenia]", verbose_name="Program szkolenia"
                    ),
                ),
                (
                    "external_name",
                    models.CharField(
                        blank=True,
                        max_length=64,
                        verbose_name="Zewnętrzny dostawca - Nazwa",
                    ),
                ),
                (
                    "external_url",
                    models.URLField(
                        blank=True, verbose_name="Zewnętrzny dostawca - URL"
                    ),
                ),
                (
                    "external_description",
                    models.TextField(
                        blank=True, verbose_name="Zewnętrzny dostawca - Opis"
                    ),
                ),
            ],
            options={
                "verbose_name": "Webinar",
                "verbose_name_plural": "Webinary",
                "ordering": ["date"],
            },
            managers=[
                ("manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="WebinarApplication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("INIT", "Zgłoszenie rozpoczęte"),
                            ("SENT", "Zgłoszenie wysłane"),
                            ("RESIGNATION", "Rezygnacja ze zgłoszenia"),
                        ],
                        default="INIT",
                        max_length=32,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Stworzono"),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        unique=True,
                        verbose_name="Identyfikator zgłoszenia",
                    ),
                ),
                (
                    "discount_applied",
                    models.BooleanField(
                        default=False, verbose_name="Promocja nałożona"
                    ),
                ),
                (
                    "price_netto",
                    models.PositiveSmallIntegerField(verbose_name="Cena NETTO"),
                ),
                (
                    "application_type",
                    models.CharField(
                        choices=[
                            ("COMPANY", "Firma"),
                            ("JSFP", "JSFP"),
                            ("PRIVATE_PERSON", "Osoba prywatna"),
                        ],
                        default="COMPANY",
                        max_length=64,
                        verbose_name="Typ zgłoszenia",
                    ),
                ),
                (
                    "additional_information",
                    models.TextField(blank=True, verbose_name="Uwagi"),
                ),
            ],
            options={
                "verbose_name": "Zgłoszenie",
                "verbose_name_plural": "Zgłoszenia",
            },
        ),
        migrations.CreateModel(
            name="WebinarApplicationCompany",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nip",
                    models.CharField(
                        max_length=32,
                        validators=[
                            core.libs.validators.nip_validator.validate_nip_modelfield
                        ],
                        verbose_name="NIP",
                    ),
                ),
                ("name", models.CharField(max_length=250, verbose_name="Nazwa")),
                ("address", models.CharField(max_length=150, verbose_name="Adres")),
                (
                    "postal_code",
                    models.CharField(max_length=16, verbose_name="Kod pocztowy"),
                ),
                ("city", models.CharField(max_length=150, verbose_name="Miasto")),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="Email"),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="Telefon"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WebinarApplicationInvoice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "invoice_type",
                    models.CharField(
                        choices=[
                            ("INVOICE_DIGITAL", "Faktura elektroniczna"),
                            ("INVOICE_PAPER", "Faktura elektroniczna i papierowa"),
                        ],
                        default="INVOICE_DIGITAL",
                        max_length=64,
                        verbose_name="Typ faktury",
                    ),
                ),
                (
                    "invoice_email",
                    models.EmailField(
                        help_text="E-mail na który zostanie przesłana faktura",
                        max_length=254,
                        verbose_name="E-mail (Faktura)",
                    ),
                ),
                (
                    "invoice_additional_info",
                    models.TextField(
                        blank=True,
                        max_length=200,
                        verbose_name="Dodatkowe informacje (Faktura)",
                    ),
                ),
                (
                    "vat_exemption",
                    models.CharField(
                        choices=[
                            ("VAT_EXEMPTION_0", "Brak zwolnienia z VAT"),
                            (
                                "VAT_EXEMPTION_13",
                                "Szkolenia zawodowe finansowane ze środków publicznych",
                            ),
                            (
                                "VAT_EXEMPTION_36",
                                "Szkolenia zawodowe dofinansowane co najmniej w 70% ze środków publicznych",
                            ),
                        ],
                        default="VAT_EXEMPTION_0",
                        max_length=64,
                        verbose_name="Zwolnienie z VAT",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WebinarApplicationSubmitter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_participant",
                    models.BooleanField(
                        default=False, verbose_name="Jest też uczestnikiem"
                    ),
                ),
                ("first_name", models.CharField(max_length=100, verbose_name="Imię")),
                (
                    "last_name",
                    models.CharField(max_length=100, verbose_name="Nazwisko"),
                ),
                ("email", models.EmailField(max_length=254, verbose_name="Email")),
                (
                    "phone",
                    models.CharField(max_length=100, verbose_name="Numer telefonu"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WebinarParticipant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=100, verbose_name="Imię")),
                (
                    "last_name",
                    models.CharField(max_length=100, verbose_name="Nazwisko"),
                ),
                ("email", models.CharField(max_length=100, verbose_name="E-mail")),
                (
                    "phone",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Numer telefonu"
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.webinarapplication",
                        verbose_name="Zgłoszenie",
                    ),
                ),
            ],
            options={
                "verbose_name": "Uczestnicy",
                "verbose_name_plural": "Uczestnik",
            },
        ),
        migrations.CreateModel(
            name="WebinarMetadata",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "clickmeeting_id",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="ClickMeeting ID"
                    ),
                ),
                (
                    "auto_send_invoices",
                    models.BooleanField(
                        default=True,
                        help_text="Czy po zrealizowanym szkoleniu faktury mają być wysłane automatycznie do wszystkich",
                        verbose_name="Automatyczne wysyłanie faktur",
                    ),
                ),
                (
                    "is_confirmed",
                    models.BooleanField(
                        default=False,
                        help_text="Oznacza termin jako `Termin potwierdzony` na stronie. To czysto kosmetyczna funckja.",
                        verbose_name="Termin potwierdzony",
                    ),
                ),
                (
                    "remaining_places",
                    models.PositiveSmallIntegerField(
                        blank=True, default=0, verbose_name="Pozostało miejsc"
                    ),
                ),
                (
                    "webinar",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="core.webinar"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WebinarCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "visible",
                    models.BooleanField(
                        default=True, verbose_name="Widoczna na stronie"
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Nazwa kategorii"),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="Unikalny skrót pojawiający się w adresie URL (Ważne dla SEO)",
                        max_length=120,
                        unique=True,
                        verbose_name="Skrót URL",
                    ),
                ),
                (
                    "order",
                    models.PositiveSmallIntegerField(
                        default=100,
                        help_text="Im niższa wartość tym wyższa pozycja kategorii przy wyświetlaniu",
                        verbose_name="Pozycja",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Kategoria nadrzędna",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.webinarcategory",
                        verbose_name="Rodzic",
                    ),
                ),
            ],
            options={
                "verbose_name": "Kategoria",
                "verbose_name_plural": "Kategorie",
            },
            managers=[
                ("manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="WebinarApplicationMetadata",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("phoned", models.BooleanField(default=False)),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.webinarapplication",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="webinarapplication",
            name="buyer",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="application_buyer",
                to="core.webinarapplicationcompany",
                verbose_name="Nabywca",
            ),
        ),
        migrations.AddField(
            model_name="webinarapplication",
            name="invoice",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="application_invoice",
                to="core.webinarapplicationinvoice",
                verbose_name="Faktura",
            ),
        ),
        migrations.AddField(
            model_name="webinarapplication",
            name="receiver",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="application_receiver",
                to="core.webinarapplicationcompany",
                verbose_name="Odbiorca",
            ),
        ),
        migrations.AddField(
            model_name="webinarapplication",
            name="submitter",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="application_submitter",
                to="core.webinarapplicationsubmitter",
                verbose_name="Osoba zgłaszająca",
            ),
        ),
        migrations.AddField(
            model_name="webinarapplication",
            name="webinar",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="core.webinar",
                verbose_name="Webinar",
            ),
        ),
        migrations.AddField(
            model_name="webinar",
            name="categories",
            field=models.ManyToManyField(
                to="core.webinarcategory", verbose_name="Kategorie"
            ),
        ),
        migrations.AddField(
            model_name="webinar",
            name="lecturer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="core.lecturer",
                verbose_name="Wykładowca",
            ),
        ),
        migrations.AddField(
            model_name="lecturer",
            name="categories",
            field=models.ManyToManyField(
                to="core.webinarcategory", verbose_name="Kategorie"
            ),
        ),
        migrations.AddField(
            model_name="lecturer",
            name="user",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
                verbose_name="Użytkownik",
            ),
        ),
    ]
